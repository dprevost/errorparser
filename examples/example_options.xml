<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE options SYSTEM 
             "/usr/local/share/xml/errorParser/errorParserOptions10.dtd">
<!-- 
   This xml file provides the options to the errorParser program.
   
   Why a file? The number of options was getting too large. Using a file
   makes it easier to manage all these options and it will also make 
   easier to add new options in the future (as needed). 
   [Since changing options is usually something that will be done rarely
   once you are satisfy with the results, storing the options in a file 
   makes it easier to reuse the same options, evidently]
   
   Why xml? Easier to program (libxml2 does the parsing) and easy to
   provide default values for some.
   
-->

<options>
  <!-- The name of the enum. If absent, #define will be generated instead. -->
  <enumname> vdsErrors</enumname>
  <!-- Name of the output dir for the error header file. If absent, the 
       current directory will be used.
       
       Alternatively, you can put the directory directly in the header_name 
       element. But if you do, the "GUARD" will use that directory name. -->
  <header_name_dir> include/vdsf </header_name_dir>
  <!-- The file name for the .h file which will hold the errors. -->
  <header_name> vdsErrors.h </header_name>
  <!-- Name of the output dir for the code to retrieve the error messages. 
       If absent, the current directory will be used.

       Alternatively, you can put the directory directly in the 2 
       "errmsg_*_name" elements. If you do, the "GUARD" will use that 
       directory name and the .c file will include the header using the 
       full name (errmsg_header_name) -->
   <errmsg_dir> engine </errmsg_dir>
  <!-- The file name for the .h file for the code to retrieve the error 
       messages. -->
  <errmsg_header_name> VdsErrorHandler.h </errmsg_header_name>
  <!-- The file name for the .c file for the code to retrieve the error 
       messages. -->
  <errmsg_c_name> VdsErrorHandler.c </errmsg_c_name>
  <!-- Prefix to be used for the error codes (enum or #define). -->
  <prefix_error> VDS </prefix_error>
  <!-- Prefix to be used for all variables in the code to retrieve the 
       error messages -->
  <prefix_variable> vdse </prefix_variable>
  <!-- How to handle the error message. The problem: the generated C strings
       will be use, eventually, by standard C/C++ libraries and some 
       sequence of characters could have some bad side effects, possibly
       including security issues.
       The defaults:
         - escape sequences are not permitted (a more fine grain approach
           could be written if the need arise).
         - quotes (' and ") are allowed (and will be escaped as needed) 
         - The % symbol. No default. I recommend the textual "percent" 
           (% is the most problematic one, IMHO. %d %p, etc are interpreted
           differently by libc (printf()) and the iostream library (cout) -->         
  <err_msg percent="percent" />
</options>

