2008-04-16  Daniel Prevost  <dprevost@users.sourceforge.net>

    * first release (pre-alpha, 0.1.0)
        * DTD 1.0
        * Header files are generated (no doxygen comments).

2008-04-23  Daniel Prevost  <dprevost@users.sourceforge.net>

    * first alpha release (0.2.0)
        * DTD 1.1
            * Multiple copyright authors and notices are allowed.
            * Some clarifications in the names of <!ELEMENT>s.
            * Some fields were removed (they were related to the transformation
              of xml into code and did not belong there.
        * Code for error messages is generated by errorParser
        * Header file for errors is generated with doxygen comments.

2008-05-21  Daniel Prevost  <dprevost@users.sourceforge.net>
        
    * second alpha release (0.3.0)
        * DTD 1.2
           * i18n was added (the DTD itself changed a lot because of this).
        * More tests (still not enough...).
        * A DTD for the option file.
        * Documentation was written.

2008-09-24  Daniel Prevost  <dprevost@users.sourceforge.net>

    * bug release - second alpha release (0.3.1)
        * zlib1.dll was missing (needed on Windows for libxml2 optional
        * installation.
        * Corrected a bug - extra characters in the output files (two memory 
          allocations of a string with no space for the NULL byte...).

2008-10-20  Daniel Prevost  <dprevost@users.sourceforge.net>

    * bug release - first beta release (0.3.2)
        * Corrected the lack of __declspec(dllexport) on Windows (for project 
          with more than one DLL, this is a must).

2008-11-22  Daniel Prevost  <dprevost@users.sourceforge.net>

    * version 0.4.0
        * Added support for C#

2008-12-20  Daniel Prevost  <dprevost@users.sourceforge.net>

    * version 0.5.0
        * Added support for Python

2009-01-17  Daniel Prevost  <dprevost@users.sourceforge.net>

    * version 1.0 RC 1 (Release Candidate 1)
        * Complete rewrite: 
          
          Each type of output file has its own "handler" (c++ class).
          This new modularity will make it easier to modify the code,
          maintain it, add new supported languages, etc.
        
        * More tests.
        


