/*
 * Copyright (C) 2008 Daniel Prevost <dprevost@users.sourceforge.net>
 *
 * This file may be distributed and/or modified under the terms of the
 * MIT License as described by the Open Source Initiative
 * (http://opensource.org/licenses/mit-license.php) and appearing in
 * the file COPYING included in the packaging of this software.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
 * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include "PurePython.h"
#include "parser.h"

using namespace std;

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

PurePython::PurePython( std::string & filename )
   : AbstractHandler()
{
   outStream.open( filename.c_str(), fstream::out );
   
   barrier = "# --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--";
}

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

void PurePython::addTop( std::string & xmlFilename,
                         char        * timeBuf,
                         xmlChar     * version )
{
   outStream << "# This file was generated by the program errorParser" << endl;
   outStream << "# using the input file " << xmlFilename << "." << endl;
   outStream << "# Date: " << timeBuf << "." << endl << endl;
   if ( version != NULL ) {
      outStream << "# The version of the XML error file is " << 
         version << "." << endl << endl;
   }
}

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

void PurePython::addCopyright( xmlNode * node )
{
   string years, authors;
   string tmp, prefix = "# ";
   
   node = node->children;
   
   /* Go to the first element */
   while ( node->type != XML_ELEMENT_NODE ) { node = node->next; }
   stripText( node->children->content, years );
   
   /* Go to the next element */
   do { node = node->next; } while ( node->type != XML_ELEMENT_NODE );
   stripText( node->children->content, authors );
   
   outStream << "# Copyright (C) " << years << " " << authors << endl;
   
   node = node->next;
   while ( node != NULL ) {
      if ( node->type == XML_ELEMENT_NODE ) {
         outStream << "#" << endl;

         stripText( node->children->content, tmp );
         prettify( outStream, tmp, prefix, ERRP_LINE_LENGTH );
      }
      node = node->next;
   }

   outStream << endl;
}

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

void PurePython::addEndTop()
{
   outStream << barrier << endl << endl;
}

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

void PurePython::addTopCode()
{
   outStream << "def add_errors():" << endl << endl;
   outStream << "    errors = dict()" << endl;
   outStream << "    error_names = dict()" << endl << endl;
}

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

void PurePython::addError( const std::string & errNumber,
                           const std::string & errName,
                           xmlNode           * messageNode )
{
   xmlNode * node;
   bool firstpara = true;
   string tmp;
   
   node = messageNode->children;
   
   while ( node->type != XML_ELEMENT_NODE ) { node = node->next; }
   
   // jump over the error message - we only want the docu itself
   node = node->next;
   
   while ( node != NULL ) {
      if ( node->type == XML_ELEMENT_NODE ) {
         /* This can only be a paragraph of the documentation */
         stripText( node->children->content, tmp );
         
         if ( firstpara ) firstpara = false;
         else {
            outStream << "    #" << endl;
         }
         prettify( outStream, tmp, "    # ", ERRP_LINE_LENGTH );
      }
      node = node->next;
   }

   outStream << "    errors['" << errName << "'] = " << errNumber << endl;
   outStream << "    error_names[" << errNumber << "] = '" << errName << "'" << endl << endl;
}

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

void PurePython::addBottomCode()
{
   outStream << endl;
   outStream << "    return tuple(errors, error_names)" << endl << endl;
   outStream << barrier << endl << endl;
}

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--
